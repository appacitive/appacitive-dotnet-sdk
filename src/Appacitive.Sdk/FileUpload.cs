using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Appacitive.Sdk.Services;
using Appacitive.Sdk.Internal;


namespace Appacitive.Sdk
{
    /// <summary>
    /// Helper class for managing file uploads to the Appacitive file storage.
    /// </summary>
    public class FileUpload
    {
        /// <summary>
        /// Creates a new instance of FileUpload for uploading a file to appacitive.
        /// </summary>
        /// <param name="mimeType">The mime type for the file to be uploaded.</param>
        /// <param name="filename">Name of the file to be downloaded. This name should match the name of the file on Appacitive.</param>
        /// <param name="expiryInMinutes">The duration in minutes for which the upload session would be valid. After this duration, this object cannot be used to upload a file.</param>
        public FileUpload(string mimeType, string filename = null, int expiryInMinutes = 5)
        {
            this.MimeType = mimeType;
            this.FileName = filename;
            this.FileHandler = ObjectFactory.Build<IHttpFileHandler>();
        }

        /// <summary>
        /// Mime type of the file to be uploaded.
        /// </summary>
        public string MimeType { get; private set; }

        /// <summary>
        /// Name of the file to be uploaded. This is the name of the file on Appacitive and does not need to match the actual file name.
        /// If this name is not specified, the platform will return an auto generated name after the download is completed.
        /// </summary>
        public string FileName { get; private set; }

        /// <summary>
        /// The file handler used to upload the file to Appacitive.
        /// </summary>
        public IHttpFileHandler FileHandler { get; set; }

        /// <summary>
        /// Occurs once the file upload to Appacitive is completed.
        /// </summary>
        public event EventHandler<UploadCompletedEventArgs> UploadCompleted
        {
            add { this.FileHandler.UploadCompleted += value; }
            remove { this.FileHandler.UploadCompleted -= value; }
        }

        /// <summary>
        /// Occurs periodically as the file upload to Appacitive progresses.
        /// </summary>
        public event EventHandler<UploadProgressChangedEventArgs> UploadProgressChanged
        {
            add { this.FileHandler.UploadProgressChanged += value; }
            remove { this.FileHandler.UploadProgressChanged -= value; }
        }

        /// <summary>
        /// Upload the file contents via an array of bytes.
        /// </summary>
        /// <param name="data">Byte array representing the contents of the file to be uploaded.</param>
        /// <returns>The name of the file on Appacitive. This is the same as the name was provided to the FileUpload object constructor. If no name was provided, a unique name will be generated by the Appacitive platform.</returns>
        public async Task<string> UploadAsync(byte[] data)
        {
            var result = await this.GetUploadUrlAsync();
            var headers = new Dictionary<string, string> { {"Content-Type", this.MimeType } };
            await this.FileHandler.UploadAsync(result.Url, headers, "PUT", data);
            return result.FileName;
        }

        /// <summary>
        /// Uploads the contents of the file specified to Appacitive.
        /// </summary>
        /// <param name="file">Path to the file to be uploaded.</param>
        /// <returns>The name of the file on Appacitive. This is the same as the name was provided to the FileUpload object constructor. If no name was provided, a unique name will be generated by the Appacitive platform.</returns>
        public async Task<string> UploadFileAsync(string file)
        {
            var result = await this.GetUploadUrlAsync();
            var headers = new Dictionary<string, string> { { "Content-Type", this.MimeType } };
            await this.FileHandler.UploadAsync(result.Url, headers, "PUT", file);
            return result.FileName;
        }

        /// <summary>
        /// Gets a limited time valid url on which a file can be uploaded via HTTP.
        /// </summary>
        /// <param name="expiryInMinutes">Expiry duration in minutes for the upload url. The generated url will not allow uploads after this duration is over.</param>
        /// <returns>The generated upload url for this file.</returns>
        public async Task<FileUrl> GetUploadUrlAsync(int expiryInMinutes = 5)
        {
            var request = new GetUploadUrlRequest
            {
                MimeType = this.MimeType,
                FileName = this.FileName,
                ExpiryInMinutes = expiryInMinutes
            };
            var response = await request.ExecuteAsync();
            return new FileUrl(response.Filename, response.Url);
        }
    }
}
